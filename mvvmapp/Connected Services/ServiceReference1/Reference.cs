//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mvvmapp.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IItemService")]
    public interface IItemService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/Create", ReplyAction="http://tempuri.org/IItemService/CreateResponse")]
        void Create(mvvmApp.Dal.Abstract.Item item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/Create", ReplyAction="http://tempuri.org/IItemService/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(mvvmApp.Dal.Abstract.Item item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/Delete", ReplyAction="http://tempuri.org/IItemService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/Delete", ReplyAction="http://tempuri.org/IItemService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/GetAllItems", ReplyAction="http://tempuri.org/IItemService/GetAllItemsResponse")]
        mvvmApp.Dal.Abstract.Item[] GetAllItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/GetAllItems", ReplyAction="http://tempuri.org/IItemService/GetAllItemsResponse")]
        System.Threading.Tasks.Task<mvvmApp.Dal.Abstract.Item[]> GetAllItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/Update", ReplyAction="http://tempuri.org/IItemService/UpdateResponse")]
        void Update(mvvmApp.Dal.Abstract.Item item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/Update", ReplyAction="http://tempuri.org/IItemService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(mvvmApp.Dal.Abstract.Item item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/GetItem", ReplyAction="http://tempuri.org/IItemService/GetItemResponse")]
        mvvmApp.Dal.Abstract.Item GetItem(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/GetItem", ReplyAction="http://tempuri.org/IItemService/GetItemResponse")]
        System.Threading.Tasks.Task<mvvmApp.Dal.Abstract.Item> GetItemAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/getText", ReplyAction="http://tempuri.org/IItemService/getTextResponse")]
        string getText();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/getText", ReplyAction="http://tempuri.org/IItemService/getTextResponse")]
        System.Threading.Tasks.Task<string> getTextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/GetItemTitle", ReplyAction="http://tempuri.org/IItemService/GetItemTitleResponse")]
        string GetItemTitle(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/GetItemTitle", ReplyAction="http://tempuri.org/IItemService/GetItemTitleResponse")]
        System.Threading.Tasks.Task<string> GetItemTitleAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/ItemsFromDatabase", ReplyAction="http://tempuri.org/IItemService/ItemsFromDatabaseResponse")]
        void ItemsFromDatabase(string ItemsString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/ItemsFromDatabase", ReplyAction="http://tempuri.org/IItemService/ItemsFromDatabaseResponse")]
        System.Threading.Tasks.Task ItemsFromDatabaseAsync(string ItemsString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/ItemUpdated", ReplyAction="http://tempuri.org/IItemService/ItemUpdatedResponse")]
        void ItemUpdated(int id, string newTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/ItemUpdated", ReplyAction="http://tempuri.org/IItemService/ItemUpdatedResponse")]
        System.Threading.Tasks.Task ItemUpdatedAsync(int id, string newTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/ItemDeleted", ReplyAction="http://tempuri.org/IItemService/ItemDeletedResponse")]
        void ItemDeleted(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/ItemDeleted", ReplyAction="http://tempuri.org/IItemService/ItemDeletedResponse")]
        System.Threading.Tasks.Task ItemDeletedAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/ItemAdded", ReplyAction="http://tempuri.org/IItemService/ItemAddedResponse")]
        void ItemAdded(string item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IItemService/ItemAdded", ReplyAction="http://tempuri.org/IItemService/ItemAddedResponse")]
        System.Threading.Tasks.Task ItemAddedAsync(string item);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IItemServiceChannel : mvvmapp.ServiceReference1.IItemService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ItemServiceClient : System.ServiceModel.ClientBase<mvvmapp.ServiceReference1.IItemService>, mvvmapp.ServiceReference1.IItemService {
        
        public ItemServiceClient() {
        }
        
        public ItemServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ItemServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ItemServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ItemServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Create(mvvmApp.Dal.Abstract.Item item) {
            base.Channel.Create(item);
        }
        
        public System.Threading.Tasks.Task CreateAsync(mvvmApp.Dal.Abstract.Item item) {
            return base.Channel.CreateAsync(item);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public mvvmApp.Dal.Abstract.Item[] GetAllItems() {
            return base.Channel.GetAllItems();
        }
        
        public System.Threading.Tasks.Task<mvvmApp.Dal.Abstract.Item[]> GetAllItemsAsync() {
            return base.Channel.GetAllItemsAsync();
        }
        
        public void Update(mvvmApp.Dal.Abstract.Item item) {
            base.Channel.Update(item);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(mvvmApp.Dal.Abstract.Item item) {
            return base.Channel.UpdateAsync(item);
        }
        
        public mvvmApp.Dal.Abstract.Item GetItem(int id) {
            return base.Channel.GetItem(id);
        }
        
        public System.Threading.Tasks.Task<mvvmApp.Dal.Abstract.Item> GetItemAsync(int id) {
            return base.Channel.GetItemAsync(id);
        }
        
        public string getText() {
            return base.Channel.getText();
        }
        
        public System.Threading.Tasks.Task<string> getTextAsync() {
            return base.Channel.getTextAsync();
        }
        
        public string GetItemTitle(int id) {
            return base.Channel.GetItemTitle(id);
        }
        
        public System.Threading.Tasks.Task<string> GetItemTitleAsync(int id) {
            return base.Channel.GetItemTitleAsync(id);
        }
        
        public void ItemsFromDatabase(string ItemsString) {
            base.Channel.ItemsFromDatabase(ItemsString);
        }
        
        public System.Threading.Tasks.Task ItemsFromDatabaseAsync(string ItemsString) {
            return base.Channel.ItemsFromDatabaseAsync(ItemsString);
        }
        
        public void ItemUpdated(int id, string newTitle) {
            base.Channel.ItemUpdated(id, newTitle);
        }
        
        public System.Threading.Tasks.Task ItemUpdatedAsync(int id, string newTitle) {
            return base.Channel.ItemUpdatedAsync(id, newTitle);
        }
        
        public void ItemDeleted(int id) {
            base.Channel.ItemDeleted(id);
        }
        
        public System.Threading.Tasks.Task ItemDeletedAsync(int id) {
            return base.Channel.ItemDeletedAsync(id);
        }
        
        public void ItemAdded(string item) {
            base.Channel.ItemAdded(item);
        }
        
        public System.Threading.Tasks.Task ItemAddedAsync(string item) {
            return base.Channel.ItemAddedAsync(item);
        }
    }
}
